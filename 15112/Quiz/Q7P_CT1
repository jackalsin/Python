# Code Tracing #2 of 2

# Draw the view (on a sheet of paper) after these events happen in this order:
#   1) the user runs the program
#   2) the user clicks the mouse a few times in the middle of the window
#   3) the user types 'abcdef'
#   4) the user waits until nothing is moving anymore
# Assume the canvas is 300x300.

from tkinter import *

def init(data):
    data.x = data.y = 10
    data.dx = -10
    data.bounces = 0
    data.timerDelay = 50

def mousePressed(event, data):
    data.y = event.y

def keyPressed(event, data):
    if (event.keysym == 'd'):
        data.x = data.dx = 10
        data.bounces = -5
    elif ((ord(event.keysym) % 2) == (ord('a')%2)):
        data.y = min(data.y + 50, data.height - 50)

def timerFired(data):
    if (data.bounces == -1):
        return
    x = data.x + data.dx
    if ((x < 10) or (x > (data.width-10))):
        data.dx = -data.dx
        data.bounces += 1
    else:
        data.x = x

def redrawAll(canvas, data):
    (cx, cy, r) = (data.x, data.y, 50)
    canvas.create_oval(cx-r, cy-r, cx+r, cy+r, fill="cyan")
    canvas.create_text(cx, cy, text=str(data.bounces), font="Arial 24")

####################################
# use the run function as-is
####################################

def run(width=300, height=300):
    def redrawAllWrapper(canvas, data):
        canvas.delete(ALL)
        redrawAll(canvas, data)
        canvas.update()    

    def mousePressedWrapper(event, canvas, data):
        mousePressed(event, data)
        redrawAllWrapper(canvas, data)

    def keyPressedWrapper(event, canvas, data):
        keyPressed(event, data)
        redrawAllWrapper(canvas, data)

    def timerFiredWrapper(canvas, data):
        timerFired(data)
        redrawAllWrapper(canvas, data)
        # pause, then call timerFired again
        canvas.after(data.timerDelay, timerFiredWrapper, canvas, data)
    # Set up data and call init
    class Struct(object): pass
    data = Struct()
    data.width = width
    data.height = height
    data.timerDelay = 100 # milliseconds
    init(data)
    # create the root and the canvas
    root = Tk()
    canvas = Canvas(root, width=data.width, height=data.height)
    canvas.pack()
    # set up events
    root.bind("<Button-1>", lambda event:
                            mousePressedWrapper(event, canvas, data))
    root.bind("<Key>", lambda event:
                            keyPressedWrapper(event, canvas, data))
    timerFiredWrapper(canvas, data)
    # and launch the app
    root.mainloop()  # blocks until window is closed
    print("bye!")

run(300, 300)
